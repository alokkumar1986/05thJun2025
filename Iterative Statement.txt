Iterative Statement :

These are the statements which are executed repeatedly until it satisfy a condition. 

for statement :

1) for
2) for else


syntax : 
	for item in sequence:
              statement1
              statement2
              ….

Here sequence is a list/tuple/set/dictionary/string/range()


example : 

s = 'Aptech'
for i in s:
  print(i, end="")
  print(" ")

output : 
 
A 
p 
t 
e 
c
h 


Example 2 :

l = [1, 0, 21, 12, 32, 98, 34, 13, 54]
for j in l:
 print("J =", j)

output : J = 1
J = 0
J = 21
J = 12
J = 32
J = 98
J = 34
J = 13
J = 54 

Example 3 :
t = (1, 0, 21, 12, 32, 98, 34, 13, 54)
for x in t:
 print("x =", x)


range() : It is function used to create a sequence of number.

1) range(end) : 

   range(10) : 0, 1.....9

2) range(start, end) :

   range(2,10) : 2.....9

3) range(start, end, step) :
   
   range(2, 10, 2) : 2, 4, 6, 8


* create sequence of all odd number starting from 1 to 100:

range(1, 100, 2)

* create sequence of all even number starting from 2 to 100:

range(2, 100, 2)

* create a sequence of numbers between 99 and 129

range(100, 129)

Note : range() always exclude the end value from the sequence. It is used to create sequence of numbers.


range() in for loop :
=========================

for i in range(1, 11):
 print(i, end="")

output :

 1 2 ........ 10

# write a program to print all odd numbers between 10 to 20

for i in range(10, 20):
  if i%2!=0 :
    print(i)

# Write a pragram to print all the alphabets using range()

A = 65
Z = 90
range(65, 91)

for i in range(65, 91):
  print(chr(i))

# Write a program to print 5 table using range()

for i in range(5, 51,5):
   print(5)

for i in range(1,51):
  if(i%5==0):
   print(i)


dictionary in for loop :
=================================

d = {
   name : 'Aptech',
   course : 'Python',
   students : ['ABC', 'PQR', 'MNO', 'XYZ']

}

for i in d:
  print(i)

output :

name
course
students

#===================================
d = {
   name : 'Aptech',
   course : 'Python',
   students : ['ABC', 'PQR', 'MNO', 'XYZ']

}

for i in d:
  print(d[i])

output :
Aptech
Python
['ABC', 'PQR', 'MNO', 'XYZ']

#======================================
d = {
   name : 'Aptech',
   course : 'Python',
   students : ['ABC', 'PQR', 'MNO', 'XYZ']

}

for i in d:
  print(i, d[i], sep= ":")

#================================================================

for else statement :

It is similar to for,  only else will execute after the for loop finished.

syntax :

for i in sequence:
   statement1
   statement2
else :
   statement3

statement1, statement2 will be repeatedly executed till i reaches the end of the sequence

statement3 will be executed only once after for loop finished.

example :

for i in range(10) :
  print(i)
else :
  print('loop ended')

output :
0
1
2
3
4
5
6
7
8
9
loop ended


#===========================================

while loop :


while expression: 
  statement1
  statement2
  ....

Here the expression is evaluated, based on the value (True) statement1, statement2 and ... will be executeed repeatedly untill the expression value is False.

example :

i = 0
while i<=10 :
  print(i)
  i+=1

output :
0
1
2
3
4
5
6
7
8
9
10

infinite loop :

When condition is always true in while, it will execute forever and never stop. This is called infinite loop.


example :

i = 0
while i<=10:
 print(i)

example :

while True:
 print('Infinite')


Pass statement in loop :

Pass statement is often used inside for/while loop.  When the for block / while block is empty, then we get syntax error. Which means for block/ while block always expects some lines of code inside it. So to make it error free, we
write a pass statement for the empty for / while block.

example :

for i in range(100):
 pass
print('Outside for loop')

example :

name = input('Enter the name : ')
while name=='Aptech':
 pass
print('Outside of while loop')


#Pass statement inside while loop having condition True will result infinite loop.
============================================================================

else statement in while loop : 

syntax :

while expression :
   statement1
   statement2
   ….
else :
   statement11


When expression is True, statement1, statement2, ... will repeatedly execute.

But when express is False, statement11 will execute only once.


example :

i = 0
while i <= 10:
  print(i)
  i+=1
else:
  print('Out of while loop')

#==================================================================

Nested Loop :

When we have a loop inside another loop, it is called nested loop.

syntax :

for i in sequence:
  for j in sequence1:
    statement1
    statement2
    ….
 

while expression1:
  while expression2:
    statement1
    statement2
    ….


Example :

1
22
333
4444
55555
666666
7777777
88888888
999999999

for i in range(1,10):
  for j in range(i) :
    print(i, end="")

i = 1
j = 0
while i<10:
 print('')
 while j<i:
  print(i, end='')
  j+=1
 i+=1
 j=0 
 
  
Transfer statement : 

These statements are used only to transfer control from one place / line to another place / line.


1) break
2) continue

break : This statement always breaks loop and transfer the control out of the loop.

example :

for i in range(10):
  print(i)
  if i==5:
    break

Output :
0
1
2
3
4
5

continue : This statement always skip the current iteration and jump to next iteration.


example :

for i in range(10):
  if i==5:
    continue
  print(i)

output :

0
1
2
3
4
6
7
8
9


Questions :

1)
 for i in range(1,10):
   print('')
   for j in range(i):
     if(i==4):
       break
     print(i, end='')

output :

1
22
333

55555
666666
7777777
88888888
999999999
   
2)
 for i in range(1,10):
   print('')
   for j in range(i):
     if(i==4):
       continue
     print(i, end='')

output :


1
22
333

55555
666666
7777777
88888888
999999999

3) 

#
##
###
####
#####
######
#######

4) 

         @
        @ @
       @ @ @
      @ @ @ @
     @ @ @ @ @ 
    @ @ @ @ @ @

5) 
         @
        @ @
       @ @ @
      @ @ @ @
       @ @ @
        @ @
         @
   







 
















 

























             
